services:
  postgres:
    image: postgres:16.10-alpine
    container_name: pg
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
      # Opcional: ajusta locales mínimos para reducir tamaño de datos
      LANG: C.UTF-8
    volumes:
      - ./databases/pg/data:/var/lib/postgresql/data
      - ./databases/pg/entrypoint:/docker-entrypoint-initdb.d:ro

    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    # Variante Ubuntu "jammy", una de las más compactas del oficial
    image: mongo:7.0.24-jammy
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-secret}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-appdb}
    command: ["--bind_ip_all", "--wiredTigerCacheSizeGB", "1"]
    volumes:
      - ./databases/mongodb/data:/data/db
      - ./databases/mongodb/entrypoint:/docker-entrypoint-initdb.d:ro
    ports:
      - "27017:27017"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mongosh --quiet --eval 'db.runCommand({ ping: 1 })' || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # api:
  #   build: ./backend
  #   container_name: api
  #   restart: unless-stopped
  #   environment:
  #     MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/workshop?authSource=admin
  #     PORT: 3001
  #   ports:
  #     - "3001:3001"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy

# (Opcional) red dedicada
networks:
  default:
    name: local-db-net
